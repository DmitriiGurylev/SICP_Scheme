#lang racket

(define (square n) (* n n))
(define (runtime) (current-inexact-milliseconds))

(define (search-for-primes first-value) (search-for-primes-new first-value 3))
  
(define (search-for-primes-new first-value counter)
    (if (= counter 0)
        (display "done")
        (if (odd? first-value)
            (if (timed-prime-test first-value)
                (search-for-primes-new (+ first-value 2) (- counter 1))
                (search-for-primes-new (+ first-value 2) counter))
            (search-for-primes-new (+ first-value 1) counter))))

(define (timed-prime-test first-value)
  (start-prime-test first-value (runtime)))

(define (start-prime-test first-value start-time)  
  (if (fast-prime? first-value (- first-value 1))
      (report-prime first-value (- (runtime) start-time))
      false))

(define (prime? n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((prime? n) (fast-prime? n (- times 1)))
        (else false)))

(define (expmod base exp denominator)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder 
          (square (expmod base (/ exp 2) denominator))
          denominator))
        (else
         (remainder 
          (* base (expmod base (- exp 1) denominator))
          denominator))))


(define (report-prime n elapsed-time)
  (display n)
  (display " *** ")
  (display elapsed-time)
  (newline)
  true)


  